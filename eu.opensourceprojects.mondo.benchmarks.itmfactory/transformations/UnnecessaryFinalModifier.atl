-- @path JAVA=/code-quality-check/metamodels/java.ecore
-- @path CHK=/code-quality-check/metamodels/anomalies.ecore

module UnnecessaryFinalModifier;
create OUT : CHK from IN : JAVA;

helper context JAVA!Modifier def : isFinal : Boolean =
	if not self.inheritance.oclIsUndefined() then
		self.inheritance.toString() = 'final'
	else
		false
	endif;

helper context JAVA!MethodDeclaration def : isFinal : Boolean =
	if not self.modifier.oclIsUndefined() then
		self.modifier.isFinal
	else
		false
	endif;

helper context JAVA!ClassDeclaration def : checkUnnecessaryFinalModifier : Boolean =
	if not self.modifier.oclIsUndefined() then
		if self.modifier.isFinal then
			self.bodyDeclarations->select(bd | bd.oclIsTypeOf(JAVA!MethodDeclaration))
									->exists(md | md.isFinal)
		else
			false
		endif
	else
		false
	endif;

rule ClassDeclaration {
	from
		s: JAVA!ClassDeclaration (s.checkUnnecessaryFinalModifier and not s.proxy)
	to
		t: CHK!UnnecessaryFinalModifier (
			description <- 'not need to tag methods as final in a final class, check class ' + s.name
		)
	do {
		t.trace <- Sequence{s};	
	}
}

endpoint rule EndRule() {
	do {
		'TRANSFORMATION'.debug('END');
	}
}