-- @path JAVA=/code-quality-check/metamodels/java.ecore
-- @path CHK=/code-quality-check/metamodels/anomalies.ecore

module DefaultLabelNotLastInSwitchStmt;
create OUT : CHK from IN : JAVA;

helper context OclAny def : getAbstractMethodDeclaration : JAVA!AbstractMethodDeclaration =
	if self.oclIsKindOf(JAVA!AbstractMethodDeclaration) then
		self
	else
		if self.oclIsTypeOf(JAVA!Model) then
			OclUndefined
		else
			self.refImmediateComposite().getAbstractMethodDeclaration
		endif
	endif;

helper context JAVA!SwitchStatement def : checkDefaultLabelNotLastInSwitchStmt : Boolean =
	self.statements->select(stat | stat.oclIsTypeOf(JAVA!SwitchCase))->last().default;

rule SwitchStatement {
	from
		s: JAVA!SwitchStatement (s.checkDefaultLabelNotLastInSwitchStmt)
	to
		t: CHK!MissingSwitchDefault (
			description <- 'default label should not be the last one, check method ' + s.getAbstractMethodDeclaration.name
		)
	do {
		t.trace <- Sequence{s};	
	}
}

endpoint rule EndRule() {
	do {
		'TRANSFORMATION'.debug('END');
	}
}